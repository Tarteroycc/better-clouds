plugins {
	id "dev.architectury.loom" version "1.7-SNAPSHOT"
	id "architectury-plugin" version "3.4-SNAPSHOT"
	id "com.modrinth.minotaur"
}

base {
	archivesName = project.archives_base_name
}

var String loader = loom.platform.get().displayName.toLowerCase()
var String mcVersion = stonecutter.current.version

var isFabric = loader == "fabric"
var isNeoForge = loader == "neoforge"
var isForge = loader == "forge"

// The current stonecutter version (0.4) has an issue with groovy gradle which makes
// stonecutter.configureEach { stonecutter.const(...) } not work correctly inside stonecutter.gradle.
// Putting it here fixes the problem.
stonecutter.const("fabric", isFabric)
stonecutter.const("neoforge", isNeoForge)
stonecutter.const("forge", isForge)

static def buildVersionString(String modVersion, String releaseType, String mcVersion, String loader) {
	var semver = modVersion
	var isPrerelease = releaseType != "release"
	if (isPrerelease) semver += "-" + releaseType
	semver += "+" + mcVersion + "-" + loader
	if (isPrerelease) semver += ".rev." + 'git rev-parse --short HEAD'.execute().text.trim()
	return semver
}

version = buildVersionString(property('mod.version').toString(), property('mod.release').toString().toLowerCase(), mcVersion, loader)
group = project.maven_group

architectury {
	minecraft = mcVersion

	platformSetupLoomIde()
	if (isFabric)
		fabric()
	if (isForge)
		forge()
	if (isNeoForge)
		neoForge()
}

repositories {
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/releases/"
	}
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}
	maven {
		name = "Xander"
		url = "https://maven.isxander.dev/releases"
	}
	maven {
		name = 'NeoForged'
		url = 'https://maven.neoforged.net/releases'
	}
	maven { url "https://maven.quiltmc.org/repository/release" }
}

loom {
	accessWidenerPath.set(project.rootProject.file("src/main/resources/betterclouds.accesswidener"))

	runConfigs.configureEach {
		ideConfigGenerated true
		runDir "../../run"
	}

	if (isForge) forge {
		convertAccessWideners.set(true)
		mixinConfigs(
			"betterclouds.mixins.json",
			"betterclouds.optional.mixins.json",
		)
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:$mcVersion"
	mappings loom.layered {
		it.mappings("net.fabricmc:yarn:${property('loom.yarn')}:v2")
		if (property('loom.yarn_patch_neoforge') != "") {
			it.mappings("dev.architectury:yarn-mappings-patch-neoforge:${property('loom.yarn_patch_neoforge')}")
		}
	}

	if (isFabric) {
		modImplementation "net.fabricmc:fabric-loader:${property('loader.fabric')}"
		modImplementation "net.fabricmc.fabric-api:fabric-api:${property("deps.fabric_api")}"

		modImplementation "com.terraformersmc:modmenu:${property('deps.modmenu')}"
		modImplementation "dev.isxander:yet-another-config-lib:${property('deps.yacl')}-fabric"

		modCompileOnly "maven.modrinth:sodium-extra:${property('deps.sodium_extra')}"
		modCompileOnly "maven.modrinth:iris:${property('deps.iris')}"
	}

	if (isNeoForge || isForge) {
		if (isNeoForge)
			neoForge "net.neoforged:neoforge:${property('loader.neoforge')}"
		if (isForge)
			forge "net.minecraftforge:forge:${property('loader.forge')}"

		modImplementation("dev.isxander:yet-another-config-lib:${property('deps.yacl')}-neoforge") {
			transitive = false
		}

		// These should be included with yacl, but it doesn't work correctly, so adding them here
		forgeRuntimeLibrary(runtimeOnly("org.quiltmc.parsers:json:0.2.1"))
		forgeRuntimeLibrary(runtimeOnly("org.quiltmc.parsers:gson:0.2.1"))

		modCompileOnly "maven.modrinth:rubidium-extra:0.5.7e+mc1.21-build.129"
		modCompileOnly "maven.modrinth:oculus:1.20.1-1.7.0"

		// Because yarn mappings are used the mods can't be loaded from the 'mods' directory at runtime.
		// It causes NoClassDefFoundErrors due to the different mappings.
		// This is a workaround that uses 'modLocalRuntime' to remap the mods found in the 'mods-forge' directory.
		// It requires a project reload when the mods change.
		if(stonecutter.current.isActive) {
			def localModsDir = project.rootProject.file('./run/mods-forge/')
			if (localModsDir.exists() && localModsDir.isDirectory()) {
				def localMods = localModsDir
						.listFiles({ file -> file.isFile() && file.name.endsWith('.jar') } as FileFilter)
				localMods.each { mod ->
					println "Added Forge Mod: " + mod.name
					dependencies {
						modLocalRuntime files(mod)
					}
				}
			}
		}
	}

	compileOnly "maven.modrinth:distanthorizonsapi:3.0.0"
}

processResources {
	var props = [
		version: project.version,
		mc_version: findProperty("deps.minecraft.range")
	]

	props.forEach(inputs::property)

	filesMatching(["fabric.mod.json", "META-INF/mods.toml", "META-INF/neoforge.mods.toml"]) {
		expand props
	}

	if(isNeoForge || isForge)
		exclude("fabric.mod.json")
	if(isFabric)
		exclude("META-INF/mods.toml", "META-INF/neoforge.mods.toml")

	exclude("assets/**/*.ase")
	exclude("assets/**/*.xcf")
}

remapJar {
	if (isNeoForge) {
		atAccessWideners.add("betterclouds.accesswidener")
	}
}

stonecutter {
	var j21 = eval(mcVersion, ">=1.20.6")

	tasks.withType(JavaCompile).configureEach {
		it.options.release = j21 ? 21 : 17
	}

	java {
		withSourcesJar()
		sourceCompatibility = j21 ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17
		targetCompatibility = j21 ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17
	}
}

if (stonecutter.current.isActive) {
	rootProject.tasks.register("buildActive") {
		group = "project"
		dependsOn(tasks.named("build"))
	}
}

jar {
	from(project.rootProject.file("LICENSE").path) {
		rename { "${it}_${project.archives_base_name}"}
	}
}

modrinth  { // Make sure it runs after build!
	var loaderName = loom.platform.get().displayName
	var releaseName = property('mod.release').toString().capitalize()
	var releaseLetter = property('mod.release').toString().toLowerCase().substring(0, 1)

	def secrets = new Properties()

	project.rootProject.file("secrets.properties").withInputStream {
		stream -> secrets.load(stream)
	}

	token.set(secrets.MODRINTH as String)
	projectId = '5srFLIaK'
	// Will fail if Modrinth has this version already
	versionNumber = "${property('mod.version')}+${mcVersion}-${loader}-${releaseLetter}"
	versionName = "${releaseName} ${property('mod.version')} for ${mcVersion} ${loaderName}"
	versionType = "${property('mod.release')}"
	uploadFile = remapJar
	gameVersions.add(mcVersion)
	loaders.add(loader)
	dependencies {
		// A special DSL for creating dependencies
		// scope.type
		// The scope can be `required`, `optional`, `incompatible`, or `embedded`
		// The type can either be `project` or `version`
		required.version "yacl", "${property('deps.yacl')}-${loader}"

		if(isFabric) {
			required.project "fabric-api"
			optional.project "modmenu"
			incompatible.project "vulkanmod"
		}

		if(isFabric || stonecutter.eval(mcVersion, ">=1.21")) {
			optional.project "sodium"
			optional.project "iris"
		} else {
			optional.project "embeddium"
			optional.project "oculus"
		}
	}
}
